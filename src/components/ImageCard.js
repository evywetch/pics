/*
 => The purpose of this component is to show one image by itself.
 => This component is going to be responsible for rendering one single image at a time. Once the images rendered, this component is going to figure out how large the image is and then adjust the "grid-row-end" rule to accomodate that image size
 => ref={this.imageRef} = we reference this image ref, and it will tell us a little bit about this img DOM node
 => NOTE: Don't forget that all the tags in the return statements from render() are JSX tag, NOT DOM element. They will be eventually turned into a DOM element, but we don't have any good wayof somehow getting a handle on the DOM element that is being produced by this very specific img tag right here outside of the ref system. The ref system is how somehow  we get handle on some particular element that is generated by a tag
 */

import React from 'react';

class ImageCard extends React.Component {
  constructor(props) {
    super(props);
    // This is how to create a ref // NOTE: this.imageRef = instance variable
    this.imageRef = React.createRef();
    this.state = { spans: 0 };
  }

  // Create  componentDidMount() to access the  ref
  /* NOTE:  componentDidMount() will get called instantly right after(like a sec after) the ImageComponent is rendered
   */
  componentDidMount() {
    /*
      => Event = load = anytime that the image successfully loaded from the API, the callback function will be called
      */
    this.imageRef.current.addEventListener('load', this.setSpans);
  }

  setSpans = () => {
    /*
    ***** This function will ba called as a callback, has to make it as arrow function to avoid error from using "this" keyword in the function.
      => This method will calculate how many cells(grid) each image will take. It will use the height of the image devided by the row's height that we defined in grid-auto-rows: 150px; then we know how many spans(cells) this image needs
      => 150 + 1 => we add 1 to it to make sure that if we have a portion of a row that this image needs, it's going to be rounded up
      => Math.ciel() is to Round a number upward to its nearest integer
      */
    const height = this.imageRef.current.clientHeight;
    const spans = Math.ceil(height / 10);
    //  this.setState({ spans: spans });
    this.setState({ spans });
  };

  render() {
    // Destructure out
    const { description, urls } = this.props.image;
    return (
      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>
        <img ref={this.imageRef} alt={description} src={urls.regular} />
      </div>
    );
  }
}

export default ImageCard;
